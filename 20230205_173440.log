2023-02-05 17:34:40,413 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: None
GCC: gcc (GCC) 7.3.0
PyTorch: 1.13.1+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1+cu116
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-05 17:34:40,414 - mmcls - INFO - Distributed training: False
2023-02-05 17:34:40,511 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=128,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes='data/flower_dataset/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_dataset/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/HOME/scz0ash/run/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=30)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-05 17:34:40,513 - mmcls - INFO - Set random seed to 1115929722, deterministic: False
2023-02-05 17:34:42,644 - mmcls - INFO - load checkpoint from local path: /HOME/scz0ash/run/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-05 17:34:42,735 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 17:34:42,738 - mmcls - INFO - Start running, host: scz0ash@g0097, work_dir: /data/run01/scz0ash/mmclassification/work/resnet18_b32_flower
2023-02-05 17:34:42,738 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 17:34:42,738 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-05 17:34:42,738 - mmcls - INFO - Checkpoints will be saved to /data/run01/scz0ash/mmclassification/work/resnet18_b32_flower by HardDiskBackend.
2023-02-05 17:35:00,296 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 17:35:02,250 - mmcls - INFO - Epoch(val) [1][5]	accuracy_top-1: 85.6643, accuracy_top-5: 100.0000
2023-02-05 17:35:07,865 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 17:35:08,979 - mmcls - INFO - Epoch(val) [2][5]	accuracy_top-1: 87.0629, accuracy_top-5: 100.0000
2023-02-05 17:35:14,601 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 17:35:15,707 - mmcls - INFO - Epoch(val) [3][5]	accuracy_top-1: 87.4126, accuracy_top-5: 100.0000
2023-02-05 17:35:21,223 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 17:35:22,345 - mmcls - INFO - Epoch(val) [4][5]	accuracy_top-1: 87.4126, accuracy_top-5: 100.0000
2023-02-05 17:35:27,962 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 17:35:29,083 - mmcls - INFO - Epoch(val) [5][5]	accuracy_top-1: 87.2378, accuracy_top-5: 100.0000
2023-02-05 17:35:34,657 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 17:35:35,769 - mmcls - INFO - Epoch(val) [6][5]	accuracy_top-1: 87.7622, accuracy_top-5: 100.0000
2023-02-05 17:35:41,395 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 17:35:42,525 - mmcls - INFO - Epoch(val) [7][5]	accuracy_top-1: 88.4615, accuracy_top-5: 100.0000
2023-02-05 17:35:48,109 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 17:35:49,219 - mmcls - INFO - Epoch(val) [8][5]	accuracy_top-1: 88.6364, accuracy_top-5: 100.0000
2023-02-05 17:35:54,829 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 17:35:55,944 - mmcls - INFO - Epoch(val) [9][5]	accuracy_top-1: 88.8112, accuracy_top-5: 100.0000
2023-02-05 17:36:01,420 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 17:36:02,538 - mmcls - INFO - Epoch(val) [10][5]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-05 17:36:08,049 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 17:36:09,167 - mmcls - INFO - Epoch(val) [11][5]	accuracy_top-1: 89.3357, accuracy_top-5: 100.0000
2023-02-05 17:36:14,723 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 17:36:15,838 - mmcls - INFO - Epoch(val) [12][5]	accuracy_top-1: 90.0350, accuracy_top-5: 100.0000
2023-02-05 17:36:21,412 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-05 17:36:22,528 - mmcls - INFO - Epoch(val) [13][5]	accuracy_top-1: 90.2098, accuracy_top-5: 100.0000
2023-02-05 17:36:28,064 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-05 17:36:29,180 - mmcls - INFO - Epoch(val) [14][5]	accuracy_top-1: 90.2098, accuracy_top-5: 100.0000
2023-02-05 17:36:34,700 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-05 17:36:35,818 - mmcls - INFO - Epoch(val) [15][5]	accuracy_top-1: 90.3846, accuracy_top-5: 100.0000
2023-02-05 17:36:41,407 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-05 17:36:42,530 - mmcls - INFO - Epoch(val) [16][5]	accuracy_top-1: 90.5594, accuracy_top-5: 100.0000
2023-02-05 17:36:48,072 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-05 17:36:49,189 - mmcls - INFO - Epoch(val) [17][5]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-05 17:36:54,788 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-05 17:36:55,896 - mmcls - INFO - Epoch(val) [18][5]	accuracy_top-1: 90.5594, accuracy_top-5: 100.0000
2023-02-05 17:37:01,495 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-05 17:37:02,624 - mmcls - INFO - Epoch(val) [19][5]	accuracy_top-1: 90.9091, accuracy_top-5: 100.0000
2023-02-05 17:37:08,198 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 17:37:09,314 - mmcls - INFO - Epoch(val) [20][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 17:37:14,863 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-05 17:37:15,985 - mmcls - INFO - Epoch(val) [21][5]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-05 17:37:21,555 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-05 17:37:22,665 - mmcls - INFO - Epoch(val) [22][5]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-05 17:37:28,241 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-05 17:37:29,346 - mmcls - INFO - Epoch(val) [23][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 17:37:34,880 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-05 17:37:36,002 - mmcls - INFO - Epoch(val) [24][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 17:37:41,542 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-05 17:37:42,665 - mmcls - INFO - Epoch(val) [25][5]	accuracy_top-1: 91.0839, accuracy_top-5: 100.0000
2023-02-05 17:37:48,233 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-05 17:37:49,343 - mmcls - INFO - Epoch(val) [26][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 17:37:54,882 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-05 17:37:56,003 - mmcls - INFO - Epoch(val) [27][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 17:38:01,599 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-05 17:38:02,718 - mmcls - INFO - Epoch(val) [28][5]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-05 17:38:08,284 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-05 17:38:09,401 - mmcls - INFO - Epoch(val) [29][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-05 17:38:14,954 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-05 17:38:16,067 - mmcls - INFO - Epoch(val) [30][5]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
